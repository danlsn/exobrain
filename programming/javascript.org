#+TITLE: Javascript
#+filetags: :js:

* related                                                            :nodejs:
:PROPERTIES:
:ID:       rltd
:END:

* [#A] [2019-09-29] Practical Ways to Write Better JavaScript - Stack Overflow Blog
:PROPERTIES:
:ID:       snprctclwystwrtbttrjvscrptstckvrflwblg
:END:
https://stackoverflow.blog/2019/09/12/practical-ways-to-write-better-javascript/

* TODO [#B] [2020-03-13] Wes Bos on Twitter: "ðŸ”¥ Optional Chaining (deep property checking) is now in Chrome, Firefox and babel-preset-env 7.8.0. This is a huge improvement in checking if nested properties exist! https://t.co/ypmHeQ8rGw" / Twitter
:PROPERTIES:
:ID:       frwsbsntwttrptnlchnngdpprprprtsxststcypmhqrgwtwttr
:END:
https://twitter.com/wesbos/status/1238468738946646017
: Optional Chaining (deep property checking) is now in Chrome, Firefox and babel-preset-env 7.8.0.
: This is a huge improvement in checking if nested properties exist!
* [#B] [2019-11-10] fuck, ~replace~ only replaces first occurence if string is used??
:PROPERTIES:
:ID:       snfckrplcnlyrplcsfrstccrncfstrngssd
:END:
* TODO [#C] use let instead of var                                    :drill:
:PROPERTIES:
:CREATED:  [2019-07-07]
:ID:       7a6a66bd-1d36-42a9-b170-235ded0b0381
:END:
SCHEDULED: [2022-03-25]

* [#C] looping over collection { for x of arr }
:PROPERTIES:
:CREATED:  [2019-02-03]
:ID:       182c6da9-7a1f-4f0d-84eb-72cea4bf05a1
:END:
* [#C] date parsing
:PROPERTIES:
:ID:       dtprsng
:END:
http://www.datejs.com/ looks ok, supports fuzzy stuff like 'next week', 'previous month', etc
* [#D] [2019-07-14] Enabling Async/Await and Generator Functions in Babel and Node JS
:PROPERTIES:
:ID:       snnblngsyncwtndgnrtrfnctnsnbblndndjs
:END:
https://medium.com/@binyamin/enabling-async-await-and-generator-functions-in-babel-node-and-express-71e941b183e2
: Uncaught ReferenceError: regeneratorRuntime is not defined
: I found this answer to my troubles and it worked when I implemented it. Just change .babelrc to the following:
: {
:   "presets": [
:     [
:       "@babel/preset-env",
:       {
:         "targets": {
:           "node": "10"
:         }
:       }
:     ],
:     "@babel/preset-react"
:   ]
: }
* [#D] [2019-07-14] javascript - Is it safe to use async/await now? - Stack Overflow
:PROPERTIES:
:ID:       snjvscrptstsftssyncwtnwstckvrflw
:END:
https://stackoverflow.com/questions/42183155/is-it-safe-to-use-async-await-now
: So depending on what you think is acceptable it is either safe or not safe. Note the following:
:     This question was originally asked on 2017, and we have come a long way so async/await is much more safe to use now.
:     By 2019, most mobile devices already support async/await.
:     Node 8 is released on May 2017 so it should be safe to use async/await on Node.js unless your Node.js servers are very outdated.
* TODO [#B] [2020-11-10] [[https://stackoverflow.com/questions/42773714/is-async-await-truly-non-blocking-in-the-browser][javascript - Is async await truly non-blocking in the browser? - Stack Overflow]]
:PROPERTIES:
:ID:       tsstckvrflwcmqstnsssyncwtnnblckngnthbrwsrstckvrflw
:END:
: Points for the worker without an external file. That's one cool trick
* [#C] https://github.com/feltcoop/why-svelte
:PROPERTIES:
:CREATED:  [2020-03-10]
:ID:       sgthbcmfltcpwhysvlt
:END:

* [#C] [2020-03-10] Why Svelte is our choice for a large web project | Hacker News
:PROPERTIES:
:ID:       twhysvltsrchcfrlrgwbprjcthckrnws
:END:
https://news.ycombinator.com/item?id=22534639

* [#C] [2019-06-30] Implementing infinite scrolling : reactjs
:PROPERTIES:
:ID:       snmplmntngnfntscrllngrctjs
:END:
https://www.reddit.com/r/reactjs/comments/7z87o9/implementing_infinite_scrolling/
: ssuming its only 100 items, i'd just display them all from the start, and let scroll do what scroll does. if you're trying to simplify a real world example where you might have 1000's of initially returned items, then something similar to /u/pqnst but instead of just slicing 0,(page * 20), you'd have to slice(20 * (page - 1), 20 * page) and account for the height of the sliced out elements in the scrollTop of the scrolling container
* TODO [#C] [2019-08-01] google chrome extension - Injecting iframe into page with restrictive Content Security Policy - Stack Overflow
:PROPERTIES:
:ID:       thgglchrmxtnsnnjctngfrmnttvcntntscrtyplcystckvrflw
:END:
https://stackoverflow.com/questions/24641592/injecting-iframe-into-page-with-restrictive-content-security-policy

* [2020-05-02] [[https://medium.com/@invicticide/patching-an-npm-dependency-without-going-completely-insane-aa0b110a80c][Patching an NPM dependency without going completely insane]]
:PROPERTIES:
:ID:       stsmdmcmnvctcdptchngnnpmdmdpndncywthtgngcmpltlynsn
:END:
* TODO [#C] Tweet from Guy Bedford (@guybedford), at Dec 27, 19:23  :js:repl:
:PROPERTIES:
:CREATED:  [2019-12-27]
:ID:       twtfrmgybdfrdgybdfrdtdc
:END:
: Periodic reminder that `await import('//dev.jspm.io/[pkg]')` allows you to import anything from npm in the browser instantly. I often use this in the console to test things out.

https://twitter.com/guybedford/status/1202022281633030145

* TODO [#C] [2019-08-18] stidges/jquery-searchable: Tiny, fast jQuery plugin to search through elements as you type. :search:
:PROPERTIES:
:ID:       snstdgsjqrysrchbltnyfstjqyplgntsrchthrghlmntssytyp
:END:
https://github.com/stidges/jquery-searchable
: Tiny, fast jQuery plugin to search through elements as you type.
* TODO [#D] [2019-08-18] flexsearch - npm                            :search:
:PROPERTIES:
:ID:       snflxsrchnpm
:END:
https://www.npmjs.com/package/flexsearch

* TODO [#D] codemirror search widget                                     :js:
:PROPERTIES:
:CREATED:  [2019-08-28]
:ID:       cdmrrrsrchwdgt
:END:
* [#C] [2020-01-30] Svelte 3: Rethinking reactivity
:PROPERTIES:
:ID:       thsvltrthnkngrctvty
:END:
https://svelte.dev/blog/svelte-3-rethinking-reactivity
: Svelte is a component framework â€” like React or Vue â€” but with an important difference. Traditional frameworks allow you to write declarative state-driven code, but there's a penalty: the browser must do extra work to convert those declarative structures into DOM operations, using techniques like
: that eat into your frame budget and tax the garbage collector.
: Instead, Svelte runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.
* [2020-07-18] [[https://stackoverflow.com/questions/282670/easiest-way-to-sort-dom-nodes][javascript - Easiest way to sort DOM nodes? - Stack Overflow]] :js:
:PROPERTIES:
:ID:       stsstckvrflwcmqstnssstwytptsstwytsrtdmndsstckvrflw
:END:
: By using list.children instead of list.childNodes, you can avoid the check for text nodes.
* [#C] [2020-06-21] [[https://news.ycombinator.com/item?id=23578319][A little bit of plain JavaScript can do a lot | Hacker News]]
:PROPERTIES:
:ID:       snsnwsycmbntrcmtmdlttlbtfplnjvscrptcndlthckrnws
:END:
: A bit more minified/modern version of this that I'm using:
:     function $e(t='div',p={},c=[]){
:       let el=document.createElement(t);
:       Object.assign(el,p);
:       el.append(...c);
:       return el;
:     }
:     var $t=document.createTextNode.bind(document);
* TODO [#C] [2019-09-06] A small trick on using console.log to print data in JavaScript | Lobsters :js:
:PROPERTIES:
:ID:       frsmlltrcknsngcnsllgtprntdtnjvscrptlbstrs
:END:
https://lobste.rs/s/u2dyrr/small_trick_on_using_console_log_print
: console.log("User(%o)", user)
: console.table is also useful
:     faitswulff avatar faitswulff 3 hours ago | link |
: Iâ€™ve started to use console.table for pretty much everything. Itâ€™s so nice.
* TODO [#C] [2020-06-05] [[https://merveilles.town/@materialfuture/104292286688572143][MaterialFuture: "Tried out DenoJS to play around with Vue and it wâ€¦" - Merveilles]] :js:
:PROPERTIES:
:ID:       frsmrvllstwnmtrlftrmtrlftdnjstplyrndwthvndtwmrvlls
:END:
: Tried out DenoJS to play around with Vue and it was very pleasant to use.
: I'm going to have to read more into it, but I think any personal JS projects will be using Deno simply due to the lack of dependencies and speed.
