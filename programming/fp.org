#+TITLE: Functional programming
#+filetags: fp

* [2016-06-20] What is functional programming?
:PROPERTIES:
:ID:       whtsfnctnlprgrmmng
:END:
- First-class and higher-order functions
- Pure functions
- Recursion (as a consequence of pure functions?)
- Strict versus non-strict evaluation
- Type systems

: When do you choose functional programming over object oriented?
: When you anticipate a different kind of software evolution:
: 
: Object-oriented languages are good when you have a fixed set of operations on things, and as your code evolves, you primarily add new things. This can be accomplished by adding new classes which implement existing methods, and the existing classes are left alone.
: 
: Functional languages are good when you have a fixed set of things, and as your code evolves, you primarily add new operations on existing things. This can be accomplished by adding new functions which compute with existing data types, and the existing functions are left alone.
: 
: When evolution goes the wrong way, you have problems:
: 
: - Adding a new operation to an object-oriented program may require editing many class definitions to add a new method.
: - Adding a new kind of thing to a functional program may require editing many function definitions to add a new case.


* Free monads                                                         :monad:
:PROPERTIES:
:ID:       frmnds
:END:
- http://www.parsonsmatt.org/2017/09/22/what_does_free_buy_us.html good tutorial with examples
- https://markkarpov.com/post/free-monad-considered-harmful.html


* [2016-10-24] Kleisli monads                                         :monad:
:PROPERTIES:
:ID:       klslmnds
:END:
Earlier I said that the key to a monad is its Kleisli arrows. The reason why is that Kleisli arrows are morphisms in the Kleisli category, where (>=>) is Kleisli arrow composition:

#+begin_example
  (>=>) :: (Monad m) => (a -> m b) -> (b -> m c) -> (a -> m c)
  (f >=> g) x = f x >>= g
  .. and return is the identity:
  return :: (Monad m) => a -> m a
#+end_example

Like all categories, the Kleisli category must obey the category laws:

#+begin_example
  return >=> f = f                   -- Left identity
  f >=> return = f                   -- Right identity
  (f >=> g) >=> h = f >=> (g >=> h)  -- Associativity
#+end_example

* [2016-02-05] type classes: downcasting and instanceof are impossible!
:PROPERTIES:
:ID:       typclsssdwncstngndnstncfrmpssbl
:END:

* [2016-09-25] parametricity
:PROPERTIES:
:ID:       prmtrcty
:END:
: In a parametric language the presence of a universally quantified type variable intuitively conveys a very strong guarantee: A (part of a) value passed to a parametric polymorphic function in the position of a type variable is guaranteed only to be copied and moved around, but never inspected in the function

* [2016-08-07] semantics
:PROPERTIES:
:ID:       smntcs
:END:
Denotational semantics: natural, maps to mathematical domains
Operational semantics: describes execution on an abstract machine
- Small step / big step

Denotational semantics is similar to high-level operational semantics, except:
- Machine is gone
- Language is mathematics (lambda calculus)

The difference between denotational and operational semantics:
- In operational semantics, the state changes are defined by coded algorithms for a virtual machine
- In denotational semantics, they are defined by rigorous mathematical functions


* [#D] related                               :programming:haskell:typetheory:
:PROPERTIES:
:ID:       rltd
:END:
* [2015-06-20] foldl vs foldr                                            :fp:
:PROPERTIES:
:ID:       fldlvsfldr
:END:
#+begin_src haskell
  -- Left fold:
  foldl :: (a -> b -> a) -> a -> [b] -> a
  foldl f z []   = z
  foldl f z (x:xs) = foldl f (f z x) xs

  -- Tail recurstion, but recurses forever if the list is infinite.
  -- Might cause OOM due to enormous thunks.

  foldl' : strict version
  foldl' :: (a -> b -> a) -> a -> [b] -> a
  foldl' f !z [] = z
  foldl' f !z (x: xs) = foldl' f (f z x) xs

  -- Right fold:
  foldr :: (a -> b -> b) -> b -> [a] -> b
  foldr f z []     = z
  foldr f z (x:xs) = f x (foldr f z xs)
#+end_src

foldr: under lazy evaluation, may stop early and thus can deal with infinite lists.
Might cause OOM: foldr (+) 0 [1..1000000]

TODO: internal thunk stack?
* [2015-06-20] let polymorphism http://stackoverflow.com/a/12033549/706389 :fp:
:PROPERTIES:
:ID:       ltplymrphsmstckvrflwcm
:END:
We might want to define 
	let x = expr in t
	as (\x.t) expr

We've got to assign a concrete type to f (TODO why?), which means it can't be forall a.a -> a

Instead, we define it as a primitive:

: \Gamma \vdash expr: S; \Gamma \vdash t[x -> expr]: T
: ----------------------------------------------
: \Gamma \vdash let x = expr in t: T
: 
: \Gamma vdash expr:S to assure typability of expr at all.


A key insight in this matter is that rather than just typing a lambda-abstraction with a potentially polymorphic argument type, we are typing a (sugared) abstraction that is (1) applied exactly once and, moreover, that is (2) applied to a statically known argument. That is, we can first subject the "argument" (i.e. the definiens of the local definition) to type reconstruction to find its (polymorphic) type; then assign the found type to the "parameter" (the definiendum); and then, finally, type the body in the extended type context.

Basically, we can write polymorphic functions, but can't use arguments in polymorphic way.

Note that it's perfectly possible to pass a polymorphic function as an argument to another function. So something like map id ["a","b","c"] is perfectly legal. But the function may only use it as monomorphic. In the example map uses id as if it had type String -> String
