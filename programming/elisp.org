#+TITLE: Elisp
#+filetags: elisp

* related                                                             :emacs:
:PROPERTIES:
:ID:       rltd
:END:


* [#B] * code style
:PROPERTIES:
:CREATED:  [2018-04-24]
:ID:       cdstyl
:END:
http://lisp-lang.org/style-guide/

** variable naming
:PROPERTIES:
:ID:       vrblnmng
:END:
- ~*earmuff*~ style for mutable globals?
However:
- dynamic variables have a prefix
- local variables (or anything set with a let) do not have a prefix

** predicates
:PROPERTIES:
:ID:       prdcts
:END:
end with ~p~ or ~-p~

** defclass?
:PROPERTIES:
:ID:       dfclss
:END:
** :type slot; trivial-types lib?
:PROPERTIES:
:ID:       typslttrvltypslb
:END:
** use when smth instead of if smth (dox), use nuless smth instead of if not smth (dox)
:PROPERTIES:
:ID:       swhnsmthnstdffsmthdxsnlsssmthnstdffntsmthdx
:END:
** package--private-function package-public-function
:PROPERTIES:
:ID:       pckgprvtfnctnpckgpblcfnctn
:END:

* lists manipulation
:PROPERTIES:
:ID:       lstsmnpltn
:END:
** append '(a b c) '(d e f) -- concat lists
:PROPERTIES:
:ID:       ppndbcdfcnctlsts
:END:

* [2018-04-24] elisp basics
:PROPERTIES:
:ID:       lspbscs
:END:
cursor point region http://ergoemacs.org/emacs/elisp_cursor_position.html
http://ergoemacs.org/emacs/elisp_editing_basics.html

http://ergoemacs.org/emacs/elisp_optional_params.html
:   &optional prams.
:   &rest remaining params

no named params, no type checking..

thing-at-point

* [#B] [2018-06-18] sharp-quote names of functions ~(mapcar #'fun list)~
:PROPERTIES:
:ID:       shrpqtnmsffnctnsmpcrfnlst
:END:

* [#C] [2020-02-27] regexps are case sensitive
:PROPERTIES:
:ID:       rgxpsrcssnstv
:END:
https://www.reddit.com/r/emacs/comments/5jip0g/strange_replaceregexpinstring_behavior/
: So, if you want case sensitive, do
: (let ((case-fold-search nil))
:      (replace-regexp-in-string "my" "your" "mycat.txt" t t)
: )

fucking hell.. regexes in elisp are case sensitive, and that's controlled by a fucking variable. jesus



* [#B] [2020-02-02] [[https://reddit.com/r/emacs/comments/exnxha/withemacs_almost_all_you_need_to_know_about/][with-emacs · (Almost) All You Need to Know About Variables]] /r/emacs
:PROPERTIES:
:ID:       srddtcmrmcscmmntsxnxhwthmslmstllyndtknwbtvrblsrmcs
:END:
* TODO [#D] [2019-07-24] [[https://reddit.com/r/emacs/comments/chfv7y/tutorial_on_good_lisp_programming_style/][Tutorial on Good Lisp Programming Style]] /r/emacs :elisp:
:PROPERTIES:
:ID:       srddtcmrmcscmmntschfvyttrtrlngdlspprgrmmngstylrmcs
:END:

* TODO defaul error reporting sucks                                   :elisp:
:PROPERTIES:
:CREATED:  [2021-01-01]
:ID:       dflrrrrprtngscks
:END:
e.g. try making a typo here. by default it dumps a single message with absolutely no context whatsoever (file/line number)
: (advice-add #'org-org-section         :befoire #'exobrain/before-org-org-section)

stacktrace is pretty useful too
* TODO elisp sucks                                                    :elisp:
:PROPERTIES:
:CREATED:  [2021-01-01]
:ID:       lspscks
:END:
let bindings struct is _really_ annoying, which discourages naming variables
* TODO sort of hard to express... but basically                       :elisp:
:PROPERTIES:
:CREATED:  [2021-01-01]
:ID:       srtfhrdtxprssbtbsclly
:END:
maybe it's just org-mode thing since this is the only 'big' elisp system I worked with
example with org-element-set/adopt in exobrain source code
if it was language with 'real' types, it would be easy to dir() or somethign to see what methods are available
but maybe it would be less flexible, I dunno
on the other hands it means that you can always hack it *somehow* and then maybe figure out 'proper'
but discoverability really suffers
* TODO good: parinfer sometimes is quite nice                         :elisp:
:PROPERTIES:
:CREATED:  [2021-01-01]
:ID:       gdprnfrsmtmssqtnc
:END:
sometimes though it arbitrarily reararnges parens. e..g I have to be _really_ careful when pasting big source blocks from elsewhere
* TODO good parts                                                :elisp:blog:
:PROPERTIES:
:CREATED:  [2021-01-01]
:ID:       gdprts
:END:
advice-patch
* TODO elisp sucks: discourages intermediate variables                :elisp:
:PROPERTIES:
:CREATED:  [2021-01-01]
:ID:       lspscksdscrgsntrmdtvrbls
:END:

: собственно мотивационный пример на питоне
: 
: def normalize(vec):
:    x, y = vec
:    len = sqrt(x ** 2 + y ** 2)
:    if len == 0:
:        raise RuntimeError(f'bad vector {vec}')
: 
:    nx = x / len
:    ny = y / len
:    return (nx, ny)
: 
: на елиспе
: 
: (defun normalize (vec)
:   (let* ((x   (car vec))
:          (y   (cdr vec)))
:          (len (sqrt (* x x) (* y y))))
:     (if (=0 len)
:         (error (format "bad vector %s" vec)))
:     (let* ((nx (/ x len))
:            (ny (/ y len)))
:       `(,nx ,ny)))
: 
: а я хочу как-то так
: 
: (defun normalize (vec)
:   (let' (x y) vec) ;; can't do in elisp?? maybe with cl-destructuring-bind...
:   (let' len   (sqrt (* x x) (* y y)))
:   (if (= 0 len)
:       (error (format "bad vector %s" vec))
:   (let' nx (/ x len)
:         ny (/ y len))
:   `(,nx ,ny)))
: 
: наверное это можно добиться если добавить какую-нибудь магию вроде макроса (scope ...), который эти let' правильно интерпретирует
* TODO lisp unpacking like in python  =(let ((x '(2 3))) `(1 ,@x 4 5))= :drill:blog:elisp:
:PROPERTIES:
:CREATED:  [2021-01-01]
:ID:       lspnpcknglknpythnltxx
:END:
* [2021-01-06] unwind-protect works as with / try-finally block :python:elisp:
:PROPERTIES:
:ID:       nwndprtctwrksswthtryfnllyblck
:END:
* TODO good things: hacking on the config while loading stuff via eval-defun :elisp:
:PROPERTIES:
:CREATED:  [2021-01-06]
:ID:       gdthngshckngnthcnfgwhlldngstffvvldfn
:END:
i.e. I think people who advocate for REPL are pitching for a completely wrong thing -- I want to keep my code tidy, it's just nice to execute it instantly
* [#C] [2020-12-13] [[https://karthinks.com/software/more-batteries-included-with-emacs/][More batteries included with emacs | Karthinks]] regexes in elisp :elisp:
:PROPERTIES:
:ID:       skrthnkscmsftwrmrbttrsnclclddwthmcskrthnksrgxsnlsp
:END:
: A cleaner approach to regular expressions in Emacs, as most package maintainers will tell you, is to use the rx library instead. rx translates regular expressions in sexp form to a regexp string:
* [2019-09-05] magnars/s.el: The long lost Emacs string manipulation library. :elisp:
:PROPERTIES:
:ID:       mgnrsslthlnglstmcsstrngmnpltnlbrry
:END:
https://github.com/magnars/s.el

* [2018-10-13] debugging ~(message (buffer-string))~
:PROPERTIES:
:ID:       dbggngmssgbffrstrng
:END:


* [2021-01-02] [[https://github.com/Wilfred/ht.el][Wilfred/ht.el: The missing hash table library for Emacs]]
:PROPERTIES:
:ID:       sgthbcmwlfrdhtlwlfrdhtlthmssnghshtbllbrryfrmcs
:END:

* [2021-01-16] [[https://www.gnu.org/software/emacs/manual/html_node/eintr/else.html][gnu.org/software/emacs/manual/html_node/eintr/else.html]] :elisp:
:PROPERTIES:
:ID:       swwwgnrgsftwrmcsmnlhtmlndftwrmcsmnlhtmlndntrlshtml
:END:
: Note that the different levels of indentation make it easy to distinguish the then-part from the else-part.

ugh, this fucking sucks. how the fuck is this makes it easier. 
e.g. if you swap if and else clauses, indentation changes
